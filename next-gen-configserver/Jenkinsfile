pipeline {
  agent any

  tools {
    maven 'next-gen-maven'
    dockerTool 'next-gen-docker'
  }

  environment {
    DOCKER_IMAGE = "mani12345/next-gen-configserver:${BUILD_NUMBER}"
    REGISTRY_CREDENTIALS = credentials('next-gen-docker')
  }

  stages {
    stage('Check Docker Version') {
      steps {
        sh 'docker --version'
      }
    }

    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build and Test') {
      steps {
        sh 'cd next-gen-configserver && rm -rf target || true'

        sh 'cd next-gen-configserver && mvn clean package -DskipTests=true'
      }
    }

    stage('Build and Push Docker Image') {
          environment {
            DOCKER_IMAGE = "mani12345/next-gen-configserver:${BUILD_NUMBER}"
            // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
            REGISTRY_CREDENTIALS = credentials('next-gen-docker')
          }
          steps {
            script {
                sh 'cd next-gen-configserver && docker build -t ${DOCKER_IMAGE} .'
                def dockerImage = docker.image("${DOCKER_IMAGE}")
                docker.withRegistry('https://index.docker.io/v1/', "next-gen-docker") {
                    dockerImage.push()
                }
            }
          }
        }
  }
}
